git config --global user.name "vatsalpatel1000"		 ->		connect root of pc with github
git config --global user.email "vatsalpatel1000"	 ->		connect root of pc with github
git config --list					 ->		check the list of connection
git clone https://github.com/vatsalpatel1000/HTML--REACT.git ->		clone repositry to in pc 
git status
git add.								             ->     add all file 

ls 
ls -a
git --version

CLONE GIT REPO TO LOCAL PC

Modified the file 

git add . "all file"
git add file name "single file name"		        -> 			add 									
git commit -m "add new Message"			            ->			commit 		
git status					                        ->			Check git status 
git push origin main				                ->			Upload local repo to remote repo 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UPLOAD LOCAL PC DATA TO GITHUB

Init - Used to create a new git repo for pc 

git init					            ->			Configure github enviroment in local folder 				
git remote add origin <link> repo link	->			Add local pc to github repo	
git remote -v					        ->			Verify remote
git branch					            ->			Check branch
git branch -M main				        ->			Rename the branch name to main or master	
git push origin main				    ->	        push data to main branch if we want to add in another branch like master then give git push origin master  
git push -u 					        ->			set upstream	

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Branch commands

git branch					            ->          To check branch
git branch -M main				        ->          To rename branch    ,here master rename as main branch
git checkout <branch name>  			->			Navigate            ,To go from branch1 to branch2 give name where we want to go 
git checkout -b <new branch name> 		->			Create new branch
git branch -d <branch name> 			->			Delete branch

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Merging branch

git diff <Branch name>                    ->	    To compare commits,branches,files & more
git merge <branch name>                   ->        to Merge 2 branches 
OR
Using PR ---->>> add,commit,push Main/Feature1 branch Than
git diff <Branch name> Than check github for repo for accept feature1 merge request in main branch and accept and merge 
after this upgration git main branch and feature1 is merge but in local pc both r differnt for pull from github to local -->>  git pull origin main

git pull origin main                      ->        Copy github data to local pc

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Undoing changes

git reset <File name>				 ->			staged changes (add)
git reset                            ->         back one step call files
git reset HEAD1					     ->			Commited changes for one commit step back HEAD for one step 
git reset <commit hash code>         ->	        step back HEAD for more than one step using hash code
git reset --hard<commit hash>		 ->			delete modified stage form local pc
git log 					         ->			Check git history

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Fork                                 ->         A Fork is a new repository that share code and visibility settings with the original "upstream"
Copy other person github repo to our repository
go to other repo clik fork 
build new repor to ur github 
edit readme for updation or any other file on ur github repo 
and then for merge with other person click new pull request with ur updation






















Bonus: Sharing Editable Resume template to get dream jobs

 Meta Resume Template for Software Engineers
Get it here: https://lnkd.in/gU6QZsBu

üçè Apple Resume Template for Software Engineers
Get it here: https://lnkd.in/gW-8ab9z

üì¶ Amazon Resume Template for Software Engineers
Get it here: https://lnkd.in/gP-YZyfD

üçø Netflix Resume Template for Software Engineers
Get it here: https://lnkd.in/g6FWDNZF

Wanna review your resume?
Book your sessions: https://lnkd.in/d-EpSDer

1.Core:
‚Ä¢   git init
‚Ä¢   git clone
‚Ä¢   git add
‚Ä¢   git commit
‚Ä¢   git status
‚Ä¢   git diff
‚Ä¢   git checkout
‚Ä¢   git reset
‚Ä¢   git log
‚Ä¢   git show
‚Ä¢   git tag
‚Ä¢   git push
‚Ä¢   git pull

2.Branching:
‚Ä¢   git branch
‚Ä¢   git checkout -b
‚Ä¢   git merge
‚Ä¢   git rebase
‚Ä¢   git branch --set-upstream-to
‚Ä¢   git branch --unset-upstream
‚Ä¢   git cherry-pick

3.Merging:
‚Ä¢   git merge
‚Ä¢   git rebase

4.Stashing:
‚Ä¢   git stash
‚Ä¢   git stash pop
‚Ä¢   git stash list
‚Ä¢   git stash apply
‚Ä¢   git stash drop

5.Remotes:
‚Ä¢   git remote
‚Ä¢   git remote add
‚Ä¢   git remote remove
‚Ä¢   git fetch
‚Ä¢   git pull
‚Ä¢   git push
‚Ä¢   git clone --mirror

6.Configuration:
‚Ä¢   git config
‚Ä¢   git global config
‚Ä¢   git reset config

7. Plumbing:
‚Ä¢   git cat-file
‚Ä¢   git checkout-index
‚Ä¢   git commit-tree
‚Ä¢   git diff-tree
‚Ä¢   git for-each-ref
‚Ä¢   git hash-object
‚Ä¢   git ls-files
‚Ä¢   git ls-remote
‚Ä¢   git merge-tree
‚Ä¢   git read-tree
‚Ä¢   git rev-parse
‚Ä¢   git show-branch
‚Ä¢   git show-ref
‚Ä¢   git symbolic-ref
‚Ä¢   git tag --list
‚Ä¢   git update-ref

8.Porcelain:
‚Ä¢   git blame
‚Ä¢   git bisect
‚Ä¢   git checkout
‚Ä¢   git commit
‚Ä¢   git diff
‚Ä¢   git fetch
‚Ä¢   git grep
‚Ä¢   git log
‚Ä¢   git merge
‚Ä¢   git push
‚Ä¢   git rebase
‚Ä¢   git reset
‚Ä¢   git show
‚Ä¢   git tag

9.Alias:
‚Ä¢   git config --global alias.<alias> <command>

10.Hook:
‚Ä¢   git config --local core.hooksPath <path>

----------------- END -----------------

Some good resources to Learn Git faster ‚ò∫Ô∏è

1.Git Official Documentation:
   git-scm.com/doc
2.GitHub Learning Lab:
https://lnkd.in/dfQY6Jtp
3.Codecademy Course
   https://lnkd.in/dwG5_C6q
4. Pro Git: by Scott Chacon [Book]
   git-scm.com/book/en/v2
5. YouTube
‚Ä¢ FreeCodeCampOrg- beginer
  rb.gy/ljxt5s
‚Ä¢ FreeCodeCampOrg- Intermediate
  rb.gy/1x6mc

#git #interview

Feel free to add anything  missed üòäüå±